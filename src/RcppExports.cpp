// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// denoise_matrix
NumericMatrix denoise_matrix(NumericMatrix coords, NumericMatrix kNN_idcs, int K, int n_iter);
RcppExport SEXP _tviblindi_denoise_matrix(SEXP coordsSEXP, SEXP kNN_idcsSEXP, SEXP KSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kNN_idcs(kNN_idcsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(denoise_matrix(coords, kNN_idcs, K, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// knn_annoy
SEXP knn_annoy(Rcpp::NumericMatrix mat, const int K, const int trees);
RcppExport SEXP _tviblindi_knn_annoy(SEXP matSEXP, SEXP KSEXP, SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_annoy(mat, K, trees));
    return rcpp_result_gen;
END_RCPP
}
// kNN_exact
Rcpp::List kNN_exact(Rcpp::NumericMatrix coordinates, int K, int distance_function);
RcppExport SEXP _tviblindi_kNN_exact(SEXP coordinatesSEXP, SEXP KSEXP, SEXP distance_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type coordinates(coordinatesSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type distance_function(distance_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(kNN_exact(coordinates, K, distance_function));
    return rcpp_result_gen;
END_RCPP
}
// solve_conjugate_gradient
SEXP solve_conjugate_gradient(const Eigen::Map<Eigen::SparseMatrix<double> > A, const Eigen::VectorXd b, const Eigen::VectorXd iguess, const Eigen::Index nb_iter, const double err);
RcppExport SEXP _tviblindi_solve_conjugate_gradient(SEXP ASEXP, SEXP bSEXP, SEXP iguessSEXP, SEXP nb_iterSEXP, SEXP errSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type iguess(iguessSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type nb_iter(nb_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type err(errSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_conjugate_gradient(A, b, iguess, nb_iter, err));
    return rcpp_result_gen;
END_RCPP
}
// build_boundary_matrix
RcppExport SEXP build_boundary_matrix(Rcpp::List filtration, bool sort_input);
RcppExport SEXP _tviblindi_build_boundary_matrix(SEXP filtrationSEXP, SEXP sort_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type filtration(filtrationSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_input(sort_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(build_boundary_matrix(filtration, sort_input));
    return rcpp_result_gen;
END_RCPP
}
// phat_boundary
Rcpp::List phat_boundary(const Rcpp::List& filtration, const int maxdimension);
RcppExport SEXP _tviblindi_phat_boundary(SEXP filtrationSEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type filtration(filtrationSEXP);
    Rcpp::traits::input_parameter< const int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(phat_boundary(filtration, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// C_sigma
SEXP C_sigma(const NumericMatrix D, const double target, const int nIter, const double tol);
RcppExport SEXP _tviblindi_C_sigma(SEXP DSEXP, SEXP targetSEXP, SEXP nIterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(C_sigma(D, target, nIter, tol));
    return rcpp_result_gen;
END_RCPP
}
// unique_simplex_idcs
std::vector<int> unique_simplex_idcs(std::vector<std::vector<int> > cmplx, bool sort_input);
RcppExport SEXP _tviblindi_unique_simplex_idcs(SEXP cmplxSEXP, SEXP sort_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type cmplx(cmplxSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_input(sort_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_simplex_idcs(cmplx, sort_input));
    return rcpp_result_gen;
END_RCPP
}
// witness_from_points
SEXP witness_from_points(const Rcpp::NumericMatrix landmarksin, const Rcpp::NumericMatrix ws, double alpha2, unsigned int maxdimension);
RcppExport SEXP _tviblindi_witness_from_points(SEXP landmarksinSEXP, SEXP wsSEXP, SEXP alpha2SEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type landmarksin(landmarksinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(witness_from_points(landmarksin, ws, alpha2, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// witness_from_distances
SEXP witness_from_distances(const Rcpp::List IND, const Rcpp::List DIST, double alpha2, unsigned int maxdimension);
RcppExport SEXP _tviblindi_witness_from_distances(SEXP INDSEXP, SEXP DISTSEXP, SEXP alpha2SEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type IND(INDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type DIST(DISTSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(witness_from_distances(IND, DIST, alpha2, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// strong_witness_from_distances
SEXP strong_witness_from_distances(const Rcpp::List IND, const Rcpp::List DIST, double alpha2, unsigned int maxdimension);
RcppExport SEXP _tviblindi_strong_witness_from_distances(SEXP INDSEXP, SEXP DISTSEXP, SEXP alpha2SEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type IND(INDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type DIST(DISTSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(strong_witness_from_distances(IND, DIST, alpha2, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// witness_from_distances_cliques
SEXP witness_from_distances_cliques(const Rcpp::List IND, const Rcpp::List DIST, double alpha2, unsigned int maxdimension);
RcppExport SEXP _tviblindi_witness_from_distances_cliques(SEXP INDSEXP, SEXP DISTSEXP, SEXP alpha2SEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type IND(INDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type DIST(DISTSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(witness_from_distances_cliques(IND, DIST, alpha2, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// strong_witness_from_distances_cliques
SEXP strong_witness_from_distances_cliques(const Rcpp::List IND, const Rcpp::List DIST, double alpha2, unsigned int maxdimension);
RcppExport SEXP _tviblindi_strong_witness_from_distances_cliques(SEXP INDSEXP, SEXP DISTSEXP, SEXP alpha2SEXP, SEXP maxdimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type IND(INDSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type DIST(DISTSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxdimension(maxdimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(strong_witness_from_distances_cliques(IND, DIST, alpha2, maxdimension));
    return rcpp_result_gen;
END_RCPP
}
// internal_sample_points
SEXP internal_sample_points(const Rcpp::NumericMatrix ws, unsigned int nbL);
RcppExport SEXP _tviblindi_internal_sample_points(SEXP wsSEXP, SEXP nbLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nbL(nbLSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_sample_points(ws, nbL));
    return rcpp_result_gen;
END_RCPP
}
// boundaries
std::vector< std::vector<int> > boundaries(List f, bool sort_input);
RcppExport SEXP _tviblindi_boundaries(SEXP fSEXP, SEXP sort_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type f(fSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_input(sort_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(boundaries(f, sort_input));
    return rcpp_result_gen;
END_RCPP
}
// faces
std::vector< std::vector<int> > faces(List f, bool sort_input);
RcppExport SEXP _tviblindi_faces(SEXP fSEXP, SEXP sort_inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type f(fSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_input(sort_inputSEXP);
    rcpp_result_gen = Rcpp::wrap(faces(f, sort_input));
    return rcpp_result_gen;
END_RCPP
}
// alpha_complex_filtration_values_C
SEXP alpha_complex_filtration_values_C(List f, NumericMatrix coord, std::vector<int> f_u);
RcppExport SEXP _tviblindi_alpha_complex_filtration_values_C(SEXP fSEXP, SEXP coordSEXP, SEXP f_uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type f(fSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type f_u(f_uSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_complex_filtration_values_C(f, coord, f_u));
    return rcpp_result_gen;
END_RCPP
}
// walk_1simplex_indices
std::vector< std::vector<size_t> > walk_1simplex_indices(std::vector< std::vector<int> > walks, std::vector< std::vector<int> > cmplx);
RcppExport SEXP _tviblindi_walk_1simplex_indices(SEXP walksSEXP, SEXP cmplxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type walks(walksSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type cmplx(cmplxSEXP);
    rcpp_result_gen = Rcpp::wrap(walk_1simplex_indices(walks, cmplx));
    return rcpp_result_gen;
END_RCPP
}
// random_walks_from_adj
RcppExport SEXP random_walks_from_adj(const Eigen::Map<Eigen::SparseMatrix<double> > A, int start, const Eigen::Index N);
RcppExport SEXP _tviblindi_random_walks_from_adj(SEXP ASEXP, SEXP startSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(random_walks_from_adj(A, start, N));
    return rcpp_result_gen;
END_RCPP
}
// C_random_walk_adj
RcppExport SEXP C_random_walk_adj(const Eigen::Map<Eigen::SparseMatrix<double> > A, int start, const Eigen::Index nb_iter);
RcppExport SEXP _tviblindi_C_random_walk_adj(SEXP ASEXP, SEXP startSEXP, SEXP nb_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type nb_iter(nb_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(C_random_walk_adj(A, start, nb_iter));
    return rcpp_result_gen;
END_RCPP
}
// C_random_walk_adj_N
RcppExport SEXP C_random_walk_adj_N(const Eigen::Map<Eigen::SparseMatrix<double> > A, int start, const Eigen::Index nb_iter, const Eigen::Index N);
RcppExport SEXP _tviblindi_C_random_walk_adj_N(SEXP ASEXP, SEXP startSEXP, SEXP nb_iterSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type nb_iter(nb_iterSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(C_random_walk_adj_N(A, start, nb_iter, N));
    return rcpp_result_gen;
END_RCPP
}
// C_random_walk_adj_N_push
RcppExport SEXP C_random_walk_adj_N_push(const Eigen::Map<Eigen::SparseMatrix<double> > A, int start, const Eigen::Index N);
RcppExport SEXP _tviblindi_C_random_walk_adj_N_push(SEXP ASEXP, SEXP startSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< const Eigen::Index >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(C_random_walk_adj_N_push(A, start, N));
    return rcpp_result_gen;
END_RCPP
}
// remove_cycles_int_list
std::vector< std::vector<int> > remove_cycles_int_list(std::vector< std::vector<int> > series_list, std::vector< std::vector<int> > series_list_unique);
RcppExport SEXP _tviblindi_remove_cycles_int_list(SEXP series_listSEXP, SEXP series_list_uniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type series_list(series_listSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type series_list_unique(series_list_uniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_cycles_int_list(series_list, series_list_unique));
    return rcpp_result_gen;
END_RCPP
}
// get_rep_straight
SEXP get_rep_straight(std::vector<int> cycle, Rcpp::List R, Rcpp::List B, bool update);
RcppExport SEXP _tviblindi_get_rep_straight(SEXP cycleSEXP, SEXP RSEXP, SEXP BSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type cycle(cycleSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type R(RSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rep_straight(cycle, R, B, update));
    return rcpp_result_gen;
END_RCPP
}
// get_rep_straight_modified
SEXP get_rep_straight_modified(std::vector<int> cycle, Rcpp::List R, bool update);
RcppExport SEXP _tviblindi_get_rep_straight_modified(SEXP cycleSEXP, SEXP RSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type cycle(cycleSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type R(RSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rep_straight_modified(cycle, R, update));
    return rcpp_result_gen;
END_RCPP
}
// get_reps_straight_modified
std::vector< std::vector<int> > get_reps_straight_modified(std::vector< std::vector<int> > cycles, Rcpp::List R, bool update);
RcppExport SEXP _tviblindi_get_reps_straight_modified(SEXP cyclesSEXP, SEXP RSEXP, SEXP updateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type cycles(cyclesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type R(RSEXP);
    Rcpp::traits::input_parameter< bool >::type update(updateSEXP);
    rcpp_result_gen = Rcpp::wrap(get_reps_straight_modified(cycles, R, update));
    return rcpp_result_gen;
END_RCPP
}
// interpolate_trajectories
std::vector< std::vector<double> > interpolate_trajectories(std::vector< std::vector<double> > pts, double coef);
RcppExport SEXP _tviblindi_interpolate_trajectories(SEXP ptsSEXP, SEXP coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::vector<double> > >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< double >::type coef(coefSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolate_trajectories(pts, coef));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tviblindi_denoise_matrix", (DL_FUNC) &_tviblindi_denoise_matrix, 4},
    {"_tviblindi_knn_annoy", (DL_FUNC) &_tviblindi_knn_annoy, 3},
    {"_tviblindi_kNN_exact", (DL_FUNC) &_tviblindi_kNN_exact, 3},
    {"_tviblindi_solve_conjugate_gradient", (DL_FUNC) &_tviblindi_solve_conjugate_gradient, 5},
    {"_tviblindi_build_boundary_matrix", (DL_FUNC) &_tviblindi_build_boundary_matrix, 2},
    {"_tviblindi_phat_boundary", (DL_FUNC) &_tviblindi_phat_boundary, 2},
    {"_tviblindi_C_sigma", (DL_FUNC) &_tviblindi_C_sigma, 4},
    {"_tviblindi_unique_simplex_idcs", (DL_FUNC) &_tviblindi_unique_simplex_idcs, 2},
    {"_tviblindi_witness_from_points", (DL_FUNC) &_tviblindi_witness_from_points, 4},
    {"_tviblindi_witness_from_distances", (DL_FUNC) &_tviblindi_witness_from_distances, 4},
    {"_tviblindi_strong_witness_from_distances", (DL_FUNC) &_tviblindi_strong_witness_from_distances, 4},
    {"_tviblindi_witness_from_distances_cliques", (DL_FUNC) &_tviblindi_witness_from_distances_cliques, 4},
    {"_tviblindi_strong_witness_from_distances_cliques", (DL_FUNC) &_tviblindi_strong_witness_from_distances_cliques, 4},
    {"_tviblindi_internal_sample_points", (DL_FUNC) &_tviblindi_internal_sample_points, 2},
    {"_tviblindi_boundaries", (DL_FUNC) &_tviblindi_boundaries, 2},
    {"_tviblindi_faces", (DL_FUNC) &_tviblindi_faces, 2},
    {"_tviblindi_alpha_complex_filtration_values_C", (DL_FUNC) &_tviblindi_alpha_complex_filtration_values_C, 3},
    {"_tviblindi_walk_1simplex_indices", (DL_FUNC) &_tviblindi_walk_1simplex_indices, 2},
    {"_tviblindi_random_walks_from_adj", (DL_FUNC) &_tviblindi_random_walks_from_adj, 3},
    {"_tviblindi_C_random_walk_adj", (DL_FUNC) &_tviblindi_C_random_walk_adj, 3},
    {"_tviblindi_C_random_walk_adj_N", (DL_FUNC) &_tviblindi_C_random_walk_adj_N, 4},
    {"_tviblindi_C_random_walk_adj_N_push", (DL_FUNC) &_tviblindi_C_random_walk_adj_N_push, 3},
    {"_tviblindi_remove_cycles_int_list", (DL_FUNC) &_tviblindi_remove_cycles_int_list, 2},
    {"_tviblindi_get_rep_straight", (DL_FUNC) &_tviblindi_get_rep_straight, 4},
    {"_tviblindi_get_rep_straight_modified", (DL_FUNC) &_tviblindi_get_rep_straight_modified, 3},
    {"_tviblindi_get_reps_straight_modified", (DL_FUNC) &_tviblindi_get_reps_straight_modified, 3},
    {"_tviblindi_interpolate_trajectories", (DL_FUNC) &_tviblindi_interpolate_trajectories, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tviblindi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
