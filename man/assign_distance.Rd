% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_assign.R
\name{assign_distance}
\alias{assign_distance}
\title{Assign distance from origin to vertices}
\usage{
assign_distance(
  A,
  origin,
  big = 1000,
  nb_it = 1500,
  eps = 1e-06,
  sym = FALSE,
  iguess = NULL,
  weights = NULL,
  method = "cg",
  target = NULL,
  target_values = NULL
)
}
\arguments{
\item{A}{a similarity matrix (\code{sparseMatrix} object, as generated by \code{knn.adj2spadjsim} or related function).}

\item{origin}{index of the origin vertex.}

\item{big}{maximum number of non-origin vertices for exact solution of linear system. Defaults to \code{1000}.}

\item{nb_it}{maximum number of iterations for conjugate gradient or biconjugate gradient stabilised method. Defaults to \code{1500}.}

\item{eps}{error tolerance for conjugate gradient or biconjugate gradient stabilised method. Defaults to \code{1E-6}.}

\item{sym}{Boolean, is \code{A} symmetric?}

\item{iguess}{initial guess vector for solution of linear system for conjugate gradient or biconjugate gradient stabilised method.}

\item{weights}{matrix of weights (\code{sparseMatrix} object, as generated by \code{knn.adj2spadj} or related function).}

\item{method}{character, if sym==TRUE, the options are "cg" and "minres". biCGSTAB is used otherwise}

\item{target}{(optional) index/indices of events with prescribed values}

\item{target_values}{(obligatory if !is.null(target)), numeric - prescribed values for target events}
}
\value{
\code{assign_distance} returns a list containing the following elements.

\code{res} is a vector of distance values assigned to each vertex
 (indexed by vertex indices).

\code{nb_it} is number of iterations needed for numerical solution of linear system. If solution is exact, this is the string \code{exact}.

\code{error} value is relevant to numerical solution, otherwise is the string \code{exact}.
}
\description{
\code{assign_distance} assigns distance from origin to each vertex described by a similarity matrix. This is achieved via random walk simulation.
 Probability of transitioning from one node to another is determined by their similarity. A \code{distance} value is computed as the average number
 of nodes on a walk from the origin to each particular vertex. Consequently, this value can be considered the pseudotime value at which the vertex was
 reached on a walk from the origin.
}
\details{
The function involves solving a system of linear equations, involving matrix A: similarity matrix without origin vertex/vertices. If dimension of
 \code{A} exceeds a set threshold \code{big}, we solve the system numerically via conjugate gradient
 method for symmetric \code{A} or biconjugate gradient stabilised method for non-symmetric \code{A}.
 If we solve numerically, we set a maximum number of iterations (\code{nb_it}). If \code{A} is symmetric, we may provide an initial guess vector for
 \code{x} (\code{iguess}), otherwise initial guess defaults to vector of zeroes. Moreover, for numerical solutions error tolerance can be set manually (\code{eps}).
}
