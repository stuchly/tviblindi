% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/07_RandomWalks.R
\name{SimulateRandomWalks.tviblindi}
\alias{SimulateRandomWalks.tviblindi}
\title{Simulate random walks}
\usage{
\method{SimulateRandomWalks}{tviblindi}(
  tv,
  transition_model_name = "default",
  n_walks = 1000,
  equinumerous = FALSE,
  enforced_terminal_nodes = NULL,
  labels_name = "default",
  add = FALSE
)
}
\arguments{
\item{tv}{\code{tviblindi}-class object}

\item{transition_model_name}{string: name of transition model to use for generating random walks. Default value is '\code{default}'}

\item{n_walks}{integer: number of random walks to simulate. Default value is \code{1000}}

\item{equinumerous}{logical: indicates whether to simulate an equal number of walks for each potential terminal node (\code{N} for each). Default value is \code{FALSE}, whereby the frequency with which walks end in any given terminal node is probabilistic (depending on the transition model)}

\item{enforced_terminal_nodes}{optional string vector: names of labelled populations for which the node closest to centroid of that population is forced to become a terminal node. If this is specified, these enforced terminal nodes will be the only terminal nodes. Default value is \code{NULL}}

\item{labels_name}{string: name of labels vector to use if parameter \code{enforced_terminal_nodes} is specified. Default value is '\code{default}'}

\item{add}{logical: indicates whether to add the simulated walks to those that have been generated before. Otherwise, any existing walks for the given transition model are replaced. Default value is \code{FALSE}}
}
\description{
This function adds new slot \code{walks} to an object of class \code{tviblindi}.
Random walks are simulated using a pseudotime values, generated using a previously generated transition model.
}
\details{
This method simulates random walks on a directed graph (i.e. only edges along which pseudotime values increase are considered).
If the parameter \code{equinumerous} is set to \code{TRUE}, the potential terminal nodes of walks (i.e. those edges which do not lead to any other edge in the directed graph) are identified and the following procedure is followed:
for each such terminal node, the sub-component of the graph from which this end could be reached is used for simulation separately, with the same number of walks simulated for each such node.
The same procedure is followed if \code{enforced_terminal_nodes} is non-\code{NULL}.
}
